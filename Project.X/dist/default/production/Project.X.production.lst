

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed Apr 03 22:49:54 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20  0000                     
    21                           ; Version 2.05
    22                           ; Generated 20/12/2018 GMT
    23                           ; 
    24                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F4331 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     _LATAbits	set	3977
    56  0000                     _PORTDbits	set	3971
    57  0000                     _TXREG	set	4013
    58  0000                     _SPBRG	set	4015
    59  0000                     _TRISCbits	set	3988
    60  0000                     _PORTAbits	set	3968
    61  0000                     _TRISAbits	set	3986
    62  0000                     _TRISD	set	3989
    63  0000                     _TXIF	set	31988
    64  0000                     _TXEN	set	32101
    65  0000                     _RX9	set	32094
    66  0000                     _TX9	set	32102
    67  0000                     _RCIE	set	31981
    68  0000                     _TXIE	set	31980
    69  0000                     _CREN	set	32092
    70  0000                     _SPEN	set	32095
    71  0000                     _SYNC	set	32100
    72                           
    73                           	psect	smallconst
    74  000300                     __psmallconst:
    75                           	opt callstack 0
    76  000300  00                 	db	0
    77  000301                     STR_1:
    78  000301  43                 	db	67	;'C'
    79  000302  75                 	db	117	;'u'
    80  000303  72                 	db	114	;'r'
    81  000304  72                 	db	114	;'r'
    82  000305  65                 	db	101	;'e'
    83  000306  6E                 	db	110	;'n'
    84  000307  74                 	db	116	;'t'
    85  000308  20                 	db	32
    86  000309  54                 	db	84	;'T'
    87  00030A  65                 	db	101	;'e'
    88  00030B  6D                 	db	109	;'m'
    89  00030C  70                 	db	112	;'p'
    90  00030D  65                 	db	101	;'e'
    91  00030E  72                 	db	114	;'r'
    92  00030F  61                 	db	97	;'a'
    93  000310  74                 	db	116	;'t'
    94  000311  75                 	db	117	;'u'
    95  000312  72                 	db	114	;'r'
    96  000313  65                 	db	101	;'e'
    97  000314  00                 	db	0
    98  000315                     STR_2:
    99  000315  77                 	db	119	;'w'
   100  000316  6F                 	db	111	;'o'
   101  000317  72                 	db	114	;'r'
   102  000318  6C                 	db	108	;'l'
   103  000319  64                 	db	100	;'d'
   104  00031A  00                 	db	0
   105                           
   106                           ; #config settings
   107  00031B  00                 	db	0	; dummy byte at the end
   108  0000                     
   109                           	psect	cinit
   110  0004EA                     __pcinit:
   111                           	opt callstack 0
   112  0004EA                     start_initialization:
   113                           	opt callstack 0
   114  0004EA                     __initialization:
   115                           	opt callstack 0
   116  0004EA                     end_of_initialization:
   117                           	opt callstack 0
   118  0004EA                     __end_of__initialization:
   119                           	opt callstack 0
   120  0004EA  0E00               	movlw	low (__Lsmallconst shr (0+16))
   121  0004EC  6EF8               	movwf	tblptru,c
   122  0004EE  0E03               	movlw	high __Lsmallconst
   123  0004F0  6EF7               	movwf	tblptrh,c
   124  0004F2  0100               	movlb	0
   125  0004F4  EFBC  F001         	goto	_main	;jump to C main() function
   126                           
   127                           	psect	cstackCOMRAM
   128  000001                     __pcstackCOMRAM:
   129                           	opt callstack 0
   130  000001                     transmit_character@out:
   131                           	opt callstack 0
   132  000001                     Lcd_Port@a:
   133                           	opt callstack 0
   134                           
   135                           ; 1 bytes @ 0x0
   136  000001                     	ds	1
   137  000002                     Lcd_Cmd@a:
   138                           	opt callstack 0
   139  000002                     Lcd_Write_Char@temp:
   140                           	opt callstack 0
   141                           
   142                           ; 1 bytes @ 0x1
   143  000002                     	ds	1
   144  000003                     Lcd_Set_Cursor@b:
   145                           	opt callstack 0
   146  000003                     Lcd_Write_Char@y:
   147                           	opt callstack 0
   148                           
   149                           ; 1 bytes @ 0x2
   150  000003                     	ds	1
   151  000004                     Lcd_Set_Cursor@a:
   152                           	opt callstack 0
   153  000004                     Lcd_Write_Char@a:
   154                           	opt callstack 0
   155                           
   156                           ; 1 bytes @ 0x3
   157  000004                     	ds	1
   158  000005                     Lcd_Set_Cursor@z:
   159                           	opt callstack 0
   160  000005                     Lcd_Write_String@a:
   161                           	opt callstack 0
   162                           
   163                           ; 2 bytes @ 0x4
   164  000005                     	ds	1
   165  000006                     Lcd_Set_Cursor@y:
   166                           	opt callstack 0
   167                           
   168                           ; 1 bytes @ 0x5
   169  000006                     	ds	1
   170  000007                     ??_Lcd_Write_String:
   171  000007                     Lcd_Set_Cursor@temp:
   172                           	opt callstack 0
   173                           
   174                           ; 1 bytes @ 0x6
   175  000007                     	ds	2
   176  000009                     Lcd_Write_String@i:
   177                           	opt callstack 0
   178                           
   179                           ; 2 bytes @ 0x8
   180  000009                     	ds	2
   181  00000B                     ??_main:
   182                           
   183                           ; 1 bytes @ 0xA
   184  00000B                     	ds	1
   185                           
   186 ;;
   187 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   188 ;;
   189 ;; *************** function _main *****************
   190 ;; Defined at:
   191 ;;		line 18 in file "project_main.c"
   192 ;; Parameters:    Size  Location     Type
   193 ;;		None
   194 ;; Auto vars:     Size  Location     Type
   195 ;;  a               2    0        unsigned int 
   196 ;; Return value:  Size  Location     Type
   197 ;;                  2   24[None  ] int 
   198 ;; Registers used:
   199 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   200 ;; Tracked objects:
   201 ;;		On entry : 0/0
   202 ;;		On exit  : 0/0
   203 ;;		Unchanged: 0/0
   204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   205 ;;      Params:         0       0       0       0
   206 ;;      Locals:         0       0       0       0
   207 ;;      Temps:          1       0       0       0
   208 ;;      Totals:         1       0       0       0
   209 ;;Total ram usage:        1 bytes
   210 ;; Hardware stack levels required when called:    3
   211 ;; This function calls:
   212 ;;		_Lcd_Clear
   213 ;;		_Lcd_Init
   214 ;;		_Lcd_Set_Cursor
   215 ;;		_Lcd_Write_String
   216 ;;		_setting_registers
   217 ;;		_transmit_character
   218 ;; This function is called by:
   219 ;;		Startup code after reset
   220 ;; This function uses a non-reentrant model
   221 ;;
   222                           
   223                           	psect	text0
   224  000378                     __ptext0:
   225                           	opt callstack 0
   226  000378                     _main:
   227                           	opt callstack 28
   228                           
   229                           ;project_main.c: 20:     unsigned int a;;project_main.c: 21:     TRISD = 0x00;
   230                           
   231                           ;incstack = 0
   232  000378  0E00               	movlw	0
   233  00037A  6E95               	movwf	3989,c	;volatile
   234                           
   235                           ;project_main.c: 22:     Lcd_Init();
   236  00037C  EC8E  F001         	call	_Lcd_Init	;wreg free
   237                           
   238                           ;project_main.c: 23:     Lcd_Clear();
   239  000380  EC7C  F002         	call	_Lcd_Clear	;wreg free
   240                           
   241                           ;project_main.c: 24:     setting_registers();
   242  000384  EC5C  F002         	call	_setting_registers	;wreg free
   243  000388                     l1041:
   244                           
   245                           ;project_main.c: 26:     {;project_main.c: 28:         Lcd_Set_Cursor(1,1);
   246  000388  0E01               	movlw	1
   247  00038A  6E03               	movwf	Lcd_Set_Cursor@b,c
   248  00038C  0E01               	movlw	1
   249  00038E  ECE5  F001         	call	_Lcd_Set_Cursor
   250                           
   251                           ;project_main.c: 29:         Lcd_Write_String("Current Temperature");
   252  000392  0E01               	movlw	low STR_1
   253  000394  6E05               	movwf	Lcd_Write_String@a,c
   254  000396  0E03               	movlw	high STR_1
   255  000398  6E06               	movwf	Lcd_Write_String@a+1,c
   256  00039A  EC0D  F002         	call	_Lcd_Write_String	;wreg free
   257                           
   258                           ;project_main.c: 30:         transmit_character('H');
   259  00039E  0E48               	movlw	72
   260  0003A0  EC83  F002         	call	_transmit_character
   261                           
   262                           ;project_main.c: 31:         Lcd_Set_Cursor(2,1);
   263  0003A4  0E01               	movlw	1
   264  0003A6  6E03               	movwf	Lcd_Set_Cursor@b,c
   265  0003A8  0E02               	movlw	2
   266  0003AA  ECE5  F001         	call	_Lcd_Set_Cursor
   267                           
   268                           ;project_main.c: 32:         Lcd_Write_String("world");
   269  0003AE  0E15               	movlw	low STR_2
   270  0003B0  6E05               	movwf	Lcd_Write_String@a,c
   271  0003B2  0E03               	movlw	high STR_2
   272  0003B4  6E06               	movwf	Lcd_Write_String@a+1,c
   273  0003B6  EC0D  F002         	call	_Lcd_Write_String	;wreg free
   274                           
   275                           ;project_main.c: 33:         _delay((unsigned long)((2000)*(80000/4000.0)));
   276  0003BA  0E34               	movlw	52
   277  0003BC  6E0B               	movwf	??_main& (0+255),c
   278  0003BE  0EF2               	movlw	242
   279  0003C0                     u217:
   280  0003C0  2EE8               	decfsz	wreg,f,c
   281  0003C2  D7FE               	bra	u217
   282  0003C4  2E0B               	decfsz	??_main& (0+255),f,c
   283  0003C6  D7FC               	bra	u217
   284  0003C8  D7DF               	goto	l1041
   285  0003CA                     __end_of_main:
   286                           	opt callstack 0
   287                           
   288 ;; *************** function _transmit_character *****************
   289 ;; Defined at:
   290 ;;		line 29 in file "SCI_Module.c"
   291 ;; Parameters:    Size  Location     Type
   292 ;;  out             1    wreg     unsigned char 
   293 ;; Auto vars:     Size  Location     Type
   294 ;;  out             1    0[COMRAM] unsigned char 
   295 ;; Return value:  Size  Location     Type
   296 ;;                  1    wreg      void 
   297 ;; Registers used:
   298 ;;		wreg
   299 ;; Tracked objects:
   300 ;;		On entry : 0/0
   301 ;;		On exit  : 0/0
   302 ;;		Unchanged: 0/0
   303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   304 ;;      Params:         0       0       0       0
   305 ;;      Locals:         1       0       0       0
   306 ;;      Temps:          0       0       0       0
   307 ;;      Totals:         1       0       0       0
   308 ;;Total ram usage:        1 bytes
   309 ;; Hardware stack levels used:    1
   310 ;; This function calls:
   311 ;;		Nothing
   312 ;; This function is called by:
   313 ;;		_main
   314 ;; This function uses a non-reentrant model
   315 ;;
   316                           
   317                           	psect	text1
   318  000506                     __ptext1:
   319                           	opt callstack 0
   320  000506                     _transmit_character:
   321                           	opt callstack 30
   322                           
   323                           ;incstack = 0
   324                           ;transmit_character@out stored from wreg
   325  000506  6E01               	movwf	transmit_character@out,c
   326  000508                     
   327                           ;SCI_Module.c: 29: void transmit_character(char out);SCI_Module.c: 30: {;SCI_Module.c: 3
      +                          1:     while(TXIF==0);
   328  000508  A89E               	btfss	3998,4,c	;volatile
   329  00050A  D7FE               	goto	l947
   330                           
   331                           ;SCI_Module.c: 32:     TXREG = out;
   332  00050C  C001  FFAD         	movff	transmit_character@out,4013	;volatile
   333  000510  0012               	return		;funcret
   334  000512                     __end_of_transmit_character:
   335                           	opt callstack 0
   336                           
   337 ;; *************** function _setting_registers *****************
   338 ;; Defined at:
   339 ;;		line 12 in file "SCI_Module.c"
   340 ;; Parameters:    Size  Location     Type
   341 ;;		None
   342 ;; Auto vars:     Size  Location     Type
   343 ;;		None
   344 ;; Return value:  Size  Location     Type
   345 ;;                  1    wreg      void 
   346 ;; Registers used:
   347 ;;		wreg, status,2
   348 ;; Tracked objects:
   349 ;;		On entry : 0/0
   350 ;;		On exit  : 0/0
   351 ;;		Unchanged: 0/0
   352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   353 ;;      Params:         0       0       0       0
   354 ;;      Locals:         0       0       0       0
   355 ;;      Temps:          0       0       0       0
   356 ;;      Totals:         0       0       0       0
   357 ;;Total ram usage:        0 bytes
   358 ;; Hardware stack levels used:    1
   359 ;; This function calls:
   360 ;;		Nothing
   361 ;; This function is called by:
   362 ;;		_main
   363 ;; This function uses a non-reentrant model
   364 ;;
   365                           
   366                           	psect	text2
   367  0004B8                     __ptext2:
   368                           	opt callstack 0
   369  0004B8                     _setting_registers:
   370                           	opt callstack 30
   371                           
   372                           ;SCI_Module.c: 14:      TRISCbits.RC6 = 0;
   373                           
   374                           ;incstack = 0
   375  0004B8  9C94               	bcf	3988,6,c	;volatile
   376                           
   377                           ;SCI_Module.c: 15:      TRISCbits.RC7 = 1;
   378  0004BA  8E94               	bsf	3988,7,c	;volatile
   379                           
   380                           ;SCI_Module.c: 17:      SPBRG = 31;
   381  0004BC  0E1F               	movlw	31
   382  0004BE  6EAF               	movwf	4015,c	;volatile
   383                           
   384                           ;SCI_Module.c: 18:      SYNC = 0;
   385  0004C0  98AC               	bcf	4012,4,c	;volatile
   386                           
   387                           ;SCI_Module.c: 19:      SPEN = 1;
   388  0004C2  8EAB               	bsf	4011,7,c	;volatile
   389                           
   390                           ;SCI_Module.c: 20:      CREN = 1;
   391  0004C4  88AB               	bsf	4011,4,c	;volatile
   392                           
   393                           ;SCI_Module.c: 21:      TXIE = 0;
   394  0004C6  989D               	bcf	3997,4,c	;volatile
   395                           
   396                           ;SCI_Module.c: 22:      RCIE = 0;
   397  0004C8  9A9D               	bcf	3997,5,c	;volatile
   398                           
   399                           ;SCI_Module.c: 23:      TX9 = 0;
   400  0004CA  9CAC               	bcf	4012,6,c	;volatile
   401                           
   402                           ;SCI_Module.c: 24:      RX9 = 0;
   403  0004CC  9CAB               	bcf	4011,6,c	;volatile
   404                           
   405                           ;SCI_Module.c: 25:      TXEN = 1;
   406  0004CE  8AAC               	bsf	4012,5,c	;volatile
   407  0004D0  0012               	return		;funcret
   408  0004D2                     __end_of_setting_registers:
   409                           	opt callstack 0
   410                           
   411 ;; *************** function _Lcd_Write_String *****************
   412 ;; Defined at:
   413 ;;		line 104 in file "LCD_Module.c"
   414 ;; Parameters:    Size  Location     Type
   415 ;;  a               2    4[COMRAM] PTR unsigned char 
   416 ;;		 -> STR_2(6), STR_1(20), 
   417 ;; Auto vars:     Size  Location     Type
   418 ;;  i               2    8[COMRAM] int 
   419 ;; Return value:  Size  Location     Type
   420 ;;                  1    wreg      void 
   421 ;; Registers used:
   422 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   423 ;; Tracked objects:
   424 ;;		On entry : 0/0
   425 ;;		On exit  : 0/0
   426 ;;		Unchanged: 0/0
   427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   428 ;;      Params:         2       0       0       0
   429 ;;      Locals:         2       0       0       0
   430 ;;      Temps:          2       0       0       0
   431 ;;      Totals:         6       0       0       0
   432 ;;Total ram usage:        6 bytes
   433 ;; Hardware stack levels used:    1
   434 ;; Hardware stack levels required when called:    2
   435 ;; This function calls:
   436 ;;		_Lcd_Write_Char
   437 ;; This function is called by:
   438 ;;		_main
   439 ;; This function uses a non-reentrant model
   440 ;;
   441                           
   442                           	psect	text3
   443  00041A                     __ptext3:
   444                           	opt callstack 0
   445  00041A                     _Lcd_Write_String:
   446                           	opt callstack 28
   447                           
   448                           ;LCD_Module.c: 104: void Lcd_Write_String(char *a);LCD_Module.c: 105: {;LCD_Module.c: 10
      +                          6:  int i;;LCD_Module.c: 107:  for(i=0;a[i]!='\0';i++)
   449                           
   450                           ;incstack = 0
   451  00041A  0E00               	movlw	0
   452  00041C  6E0A               	movwf	Lcd_Write_String@i+1,c
   453  00041E  0E00               	movlw	0
   454  000420  6E09               	movwf	Lcd_Write_String@i,c
   455  000422  D010               	goto	l1031
   456  000424                     l1027:
   457                           
   458                           ;LCD_Module.c: 108:     Lcd_Write_Char(a[i]);
   459  000424  5009               	movf	Lcd_Write_String@i,w,c
   460  000426  2405               	addwf	Lcd_Write_String@a,w,c
   461  000428  6E07               	movwf	??_Lcd_Write_String& (0+255),c
   462  00042A  500A               	movf	Lcd_Write_String@i+1,w,c
   463  00042C  2006               	addwfc	Lcd_Write_String@a+1,w,c
   464  00042E  6E08               	movwf	(??_Lcd_Write_String+1)& (0+255),c
   465  000430  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
   466  000434  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
   467  000438                     	if	0	;tblptru may be non-zero
   468  000438                     	endif
   469  000438                     	if	0	;tblptru may be non-zero
   470  000438                     	endif
   471  000438  0008               	tblrd		*
   472  00043A  50F5               	movf	tablat,w,c
   473  00043C  EC48  F002         	call	_Lcd_Write_Char
   474  000440  4A09               	infsnz	Lcd_Write_String@i,f,c
   475  000442  2A0A               	incf	Lcd_Write_String@i+1,f,c
   476  000444                     l1031:
   477  000444  5009               	movf	Lcd_Write_String@i,w,c
   478  000446  2405               	addwf	Lcd_Write_String@a,w,c
   479  000448  6E07               	movwf	??_Lcd_Write_String& (0+255),c
   480  00044A  500A               	movf	Lcd_Write_String@i+1,w,c
   481  00044C  2006               	addwfc	Lcd_Write_String@a+1,w,c
   482  00044E  6E08               	movwf	(??_Lcd_Write_String+1)& (0+255),c
   483  000450  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
   484  000454  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
   485  000458                     	if	0	;tblptru may be non-zero
   486  000458                     	endif
   487  000458                     	if	0	;tblptru may be non-zero
   488  000458                     	endif
   489  000458  0008               	tblrd		*
   490  00045A  50F5               	movf	tablat,w,c
   491  00045C  0900               	iorlw	0
   492  00045E  B4D8               	btfsc	status,2,c
   493  000460  0012               	return	
   494  000462  D7E0               	goto	l1027
   495  000464                     __end_of_Lcd_Write_String:
   496                           	opt callstack 0
   497                           
   498 ;; *************** function _Lcd_Write_Char *****************
   499 ;; Defined at:
   500 ;;		line 88 in file "LCD_Module.c"
   501 ;; Parameters:    Size  Location     Type
   502 ;;  a               1    wreg     unsigned char 
   503 ;; Auto vars:     Size  Location     Type
   504 ;;  a               1    3[COMRAM] unsigned char 
   505 ;;  y               1    2[COMRAM] unsigned char 
   506 ;;  temp            1    1[COMRAM] unsigned char 
   507 ;; Return value:  Size  Location     Type
   508 ;;                  1    wreg      void 
   509 ;; Registers used:
   510 ;;		wreg, status,2, status,0, cstack
   511 ;; Tracked objects:
   512 ;;		On entry : 0/0
   513 ;;		On exit  : 0/0
   514 ;;		Unchanged: 0/0
   515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   516 ;;      Params:         0       0       0       0
   517 ;;      Locals:         3       0       0       0
   518 ;;      Temps:          0       0       0       0
   519 ;;      Totals:         3       0       0       0
   520 ;;Total ram usage:        3 bytes
   521 ;; Hardware stack levels used:    1
   522 ;; Hardware stack levels required when called:    1
   523 ;; This function calls:
   524 ;;		_Lcd_Port
   525 ;; This function is called by:
   526 ;;		_Lcd_Write_String
   527 ;; This function uses a non-reentrant model
   528 ;;
   529                           
   530                           	psect	text4
   531  000490                     __ptext4:
   532                           	opt callstack 0
   533  000490                     _Lcd_Write_Char:
   534                           	opt callstack 28
   535                           
   536                           ;incstack = 0
   537                           ;Lcd_Write_Char@a stored from wreg
   538  000490  6E04               	movwf	Lcd_Write_Char@a,c
   539                           
   540                           ;LCD_Module.c: 88: void Lcd_Write_Char(char a);LCD_Module.c: 89: {;LCD_Module.c: 90:    
      +                          char temp,y;;LCD_Module.c: 91:    temp = a&0x0F;
   541  000492  5004               	movf	Lcd_Write_Char@a,w,c
   542  000494  0B0F               	andlw	15
   543  000496  6E02               	movwf	Lcd_Write_Char@temp,c
   544                           
   545                           ;LCD_Module.c: 92:    y = a&0xF0;
   546  000498  5004               	movf	Lcd_Write_Char@a,w,c
   547  00049A  0BF0               	andlw	240
   548  00049C  6E03               	movwf	Lcd_Write_Char@y,c
   549                           
   550                           ;LCD_Module.c: 93:    PORTDbits.RD2 = 1;
   551  00049E  8483               	bsf	3971,2,c	;volatile
   552                           
   553                           ;LCD_Module.c: 94:    Lcd_Port(y>>4);
   554  0004A0  3803               	swapf	Lcd_Write_Char@y,w,c
   555  0004A2  0B0F               	andlw	15
   556  0004A4  EC32  F002         	call	_Lcd_Port
   557                           
   558                           ;LCD_Module.c: 95:    PORTDbits.RD3 = 1;
   559  0004A8  8683               	bsf	3971,3,c	;volatile
   560                           
   561                           ;LCD_Module.c: 97:    PORTDbits.RD3 = 0;
   562                           
   563                           ;LCD_Module.c: 96:    _delay((unsigned long)((40)*(80000/4000000.0)));
   564  0004AA  9683               	bcf	3971,3,c	;volatile
   565                           
   566                           ;LCD_Module.c: 98:    Lcd_Port(temp);
   567  0004AC  5002               	movf	Lcd_Write_Char@temp,w,c
   568  0004AE  EC32  F002         	call	_Lcd_Port
   569                           
   570                           ;LCD_Module.c: 99:    PORTDbits.RD3 = 1;
   571  0004B2  8683               	bsf	3971,3,c	;volatile
   572                           
   573                           ;LCD_Module.c: 101:    PORTDbits.RD3 = 0;
   574                           
   575                           ;LCD_Module.c: 100:    _delay((unsigned long)((40)*(80000/4000000.0)));
   576  0004B4  9683               	bcf	3971,3,c	;volatile
   577  0004B6  0012               	return		;funcret
   578  0004B8                     __end_of_Lcd_Write_Char:
   579                           	opt callstack 0
   580                           
   581 ;; *************** function _Lcd_Set_Cursor *****************
   582 ;; Defined at:
   583 ;;		line 48 in file "LCD_Module.c"
   584 ;; Parameters:    Size  Location     Type
   585 ;;  a               1    wreg     unsigned char 
   586 ;;  b               1    2[COMRAM] unsigned char 
   587 ;; Auto vars:     Size  Location     Type
   588 ;;  a               1    3[COMRAM] unsigned char 
   589 ;;  temp            1    6[COMRAM] unsigned char 
   590 ;;  y               1    5[COMRAM] unsigned char 
   591 ;;  z               1    4[COMRAM] unsigned char 
   592 ;; Return value:  Size  Location     Type
   593 ;;                  1    wreg      void 
   594 ;; Registers used:
   595 ;;		wreg, status,2, status,0, cstack
   596 ;; Tracked objects:
   597 ;;		On entry : 0/0
   598 ;;		On exit  : 0/0
   599 ;;		Unchanged: 0/0
   600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   601 ;;      Params:         1       0       0       0
   602 ;;      Locals:         4       0       0       0
   603 ;;      Temps:          0       0       0       0
   604 ;;      Totals:         5       0       0       0
   605 ;;Total ram usage:        5 bytes
   606 ;; Hardware stack levels used:    1
   607 ;; Hardware stack levels required when called:    2
   608 ;; This function calls:
   609 ;;		_Lcd_Cmd
   610 ;; This function is called by:
   611 ;;		_main
   612 ;; This function uses a non-reentrant model
   613 ;;
   614                           
   615                           	psect	text5
   616  0003CA                     __ptext5:
   617                           	opt callstack 0
   618  0003CA                     _Lcd_Set_Cursor:
   619                           	opt callstack 28
   620                           
   621                           ;incstack = 0
   622                           ;Lcd_Set_Cursor@a stored from wreg
   623  0003CA  6E04               	movwf	Lcd_Set_Cursor@a,c
   624                           
   625                           ;LCD_Module.c: 48: void Lcd_Set_Cursor(char a, char b);LCD_Module.c: 49: {;LCD_Module.c:
      +                           50:  char temp,z,y;;LCD_Module.c: 51:  if(a == 1)
   626  0003CC  0404               	decf	Lcd_Set_Cursor@a,w,c
   627  0003CE  A4D8               	btfss	status,2,c
   628  0003D0  D010               	goto	l1017
   629                           
   630                           ;LCD_Module.c: 52:  {;LCD_Module.c: 53:    temp = 0x80 + b - 1;
   631  0003D2  5003               	movf	Lcd_Set_Cursor@b,w,c
   632  0003D4  0F7F               	addlw	127
   633  0003D6  6E07               	movwf	Lcd_Set_Cursor@temp,c
   634                           
   635                           ;LCD_Module.c: 54:   z = temp>>4;
   636  0003D8  3807               	swapf	Lcd_Set_Cursor@temp,w,c
   637  0003DA  0B0F               	andlw	15
   638  0003DC  6E05               	movwf	Lcd_Set_Cursor@z,c
   639                           
   640                           ;LCD_Module.c: 55:   y = temp & 0x0F;
   641  0003DE  5007               	movf	Lcd_Set_Cursor@temp,w,c
   642  0003E0  0B0F               	andlw	15
   643  0003E2  6E06               	movwf	Lcd_Set_Cursor@y,c
   644                           
   645                           ;LCD_Module.c: 56:   Lcd_Cmd(z);
   646  0003E4  5005               	movf	Lcd_Set_Cursor@z,w,c
   647  0003E6  EC69  F002         	call	_Lcd_Cmd
   648                           
   649                           ;LCD_Module.c: 57:   Lcd_Cmd(y);
   650  0003EA  5006               	movf	Lcd_Set_Cursor@y,w,c
   651  0003EC  EC69  F002         	call	_Lcd_Cmd
   652                           
   653                           ;LCD_Module.c: 58:  }
   654  0003F0  0012               	return	
   655  0003F2                     l1017:
   656  0003F2  0E02               	movlw	2
   657  0003F4  1804               	xorwf	Lcd_Set_Cursor@a,w,c
   658  0003F6  A4D8               	btfss	status,2,c
   659  0003F8  0012               	return	
   660                           
   661                           ;LCD_Module.c: 60:  {;LCD_Module.c: 61:   temp = 0xC0 + b - 1;
   662  0003FA  5003               	movf	Lcd_Set_Cursor@b,w,c
   663  0003FC  0FBF               	addlw	191
   664  0003FE  6E07               	movwf	Lcd_Set_Cursor@temp,c
   665                           
   666                           ;LCD_Module.c: 62:   z = temp>>4;
   667  000400  3807               	swapf	Lcd_Set_Cursor@temp,w,c
   668  000402  0B0F               	andlw	15
   669  000404  6E05               	movwf	Lcd_Set_Cursor@z,c
   670                           
   671                           ;LCD_Module.c: 63:   y = temp & 0x0F;
   672  000406  5007               	movf	Lcd_Set_Cursor@temp,w,c
   673  000408  0B0F               	andlw	15
   674  00040A  6E06               	movwf	Lcd_Set_Cursor@y,c
   675                           
   676                           ;LCD_Module.c: 64:   Lcd_Cmd(z);
   677  00040C  5005               	movf	Lcd_Set_Cursor@z,w,c
   678  00040E  EC69  F002         	call	_Lcd_Cmd
   679                           
   680                           ;LCD_Module.c: 65:   Lcd_Cmd(y);
   681  000412  5006               	movf	Lcd_Set_Cursor@y,w,c
   682  000414  EC69  F002         	call	_Lcd_Cmd
   683  000418  0012               	return		;funcret
   684  00041A                     __end_of_Lcd_Set_Cursor:
   685                           	opt callstack 0
   686                           
   687 ;; *************** function _Lcd_Init *****************
   688 ;; Defined at:
   689 ;;		line 69 in file "LCD_Module.c"
   690 ;; Parameters:    Size  Location     Type
   691 ;;		None
   692 ;; Auto vars:     Size  Location     Type
   693 ;;		None
   694 ;; Return value:  Size  Location     Type
   695 ;;                  1    wreg      void 
   696 ;; Registers used:
   697 ;;		wreg, status,2, cstack
   698 ;; Tracked objects:
   699 ;;		On entry : 0/0
   700 ;;		On exit  : 0/0
   701 ;;		Unchanged: 0/0
   702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   703 ;;      Params:         0       0       0       0
   704 ;;      Locals:         0       0       0       0
   705 ;;      Temps:          0       0       0       0
   706 ;;      Totals:         0       0       0       0
   707 ;;Total ram usage:        0 bytes
   708 ;; Hardware stack levels used:    1
   709 ;; Hardware stack levels required when called:    2
   710 ;; This function calls:
   711 ;;		_Lcd_Cmd
   712 ;;		_Lcd_Port
   713 ;; This function is called by:
   714 ;;		_main
   715 ;; This function uses a non-reentrant model
   716 ;;
   717                           
   718                           	psect	text6
   719  00031C                     __ptext6:
   720                           	opt callstack 0
   721  00031C                     _Lcd_Init:
   722                           	opt callstack 28
   723                           
   724                           ;LCD_Module.c: 71:   Lcd_Port(0x00);
   725                           
   726                           ;incstack = 0
   727  00031C  0E00               	movlw	0
   728  00031E  EC32  F002         	call	_Lcd_Port
   729                           
   730                           ;LCD_Module.c: 72:    _delay((unsigned long)((20)*(80000/4000.0)));
   731  000322  0E85               	movlw	133
   732  000324                     u227:
   733  000324  2EE8               	decfsz	wreg,f,c
   734  000326  D7FE               	bra	u227
   735  000328  F000               	nop	
   736                           
   737                           ;LCD_Module.c: 73:   Lcd_Cmd(0x03);
   738  00032A  0E03               	movlw	3
   739  00032C  EC69  F002         	call	_Lcd_Cmd
   740                           
   741                           ;LCD_Module.c: 74:  _delay((unsigned long)((5)*(80000/4000.0)));
   742  000330  0E21               	movlw	33
   743  000332                     u237:
   744  000332  2EE8               	decfsz	wreg,f,c
   745  000334  D7FE               	bra	u237
   746  000336  F000               	nop	
   747                           
   748                           ;LCD_Module.c: 75:   Lcd_Cmd(0x03);
   749  000338  0E03               	movlw	3
   750  00033A  EC69  F002         	call	_Lcd_Cmd
   751                           
   752                           ;LCD_Module.c: 76:  _delay((unsigned long)((11)*(80000/4000.0)));
   753  00033E  0E49               	movlw	73
   754  000340                     u247:
   755  000340  2EE8               	decfsz	wreg,f,c
   756  000342  D7FE               	bra	u247
   757  000344  F000               	nop	
   758                           
   759                           ;LCD_Module.c: 77:   Lcd_Cmd(0x03);
   760  000346  0E03               	movlw	3
   761  000348  EC69  F002         	call	_Lcd_Cmd
   762                           
   763                           ;LCD_Module.c: 79:   Lcd_Cmd(0x02);
   764  00034C  0E02               	movlw	2
   765  00034E  EC69  F002         	call	_Lcd_Cmd
   766                           
   767                           ;LCD_Module.c: 80:   Lcd_Cmd(0x02);
   768  000352  0E02               	movlw	2
   769  000354  EC69  F002         	call	_Lcd_Cmd
   770                           
   771                           ;LCD_Module.c: 81:   Lcd_Cmd(0x08);
   772  000358  0E08               	movlw	8
   773  00035A  EC69  F002         	call	_Lcd_Cmd
   774                           
   775                           ;LCD_Module.c: 82:   Lcd_Cmd(0x00);
   776  00035E  0E00               	movlw	0
   777  000360  EC69  F002         	call	_Lcd_Cmd
   778                           
   779                           ;LCD_Module.c: 83:   Lcd_Cmd(0x0C);
   780  000364  0E0C               	movlw	12
   781  000366  EC69  F002         	call	_Lcd_Cmd
   782                           
   783                           ;LCD_Module.c: 84:   Lcd_Cmd(0x00);
   784  00036A  0E00               	movlw	0
   785  00036C  EC69  F002         	call	_Lcd_Cmd
   786                           
   787                           ;LCD_Module.c: 85:   Lcd_Cmd(0x06);
   788  000370  0E06               	movlw	6
   789  000372  EC69  F002         	call	_Lcd_Cmd
   790  000376  0012               	return		;funcret
   791  000378                     __end_of_Lcd_Init:
   792                           	opt callstack 0
   793                           
   794 ;; *************** function _Lcd_Clear *****************
   795 ;; Defined at:
   796 ;;		line 42 in file "LCD_Module.c"
   797 ;; Parameters:    Size  Location     Type
   798 ;;		None
   799 ;; Auto vars:     Size  Location     Type
   800 ;;		None
   801 ;; Return value:  Size  Location     Type
   802 ;;                  1    wreg      void 
   803 ;; Registers used:
   804 ;;		wreg, status,2, cstack
   805 ;; Tracked objects:
   806 ;;		On entry : 0/0
   807 ;;		On exit  : 0/0
   808 ;;		Unchanged: 0/0
   809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   810 ;;      Params:         0       0       0       0
   811 ;;      Locals:         0       0       0       0
   812 ;;      Temps:          0       0       0       0
   813 ;;      Totals:         0       0       0       0
   814 ;;Total ram usage:        0 bytes
   815 ;; Hardware stack levels used:    1
   816 ;; Hardware stack levels required when called:    2
   817 ;; This function calls:
   818 ;;		_Lcd_Cmd
   819 ;; This function is called by:
   820 ;;		_main
   821 ;; This function uses a non-reentrant model
   822 ;;
   823                           
   824                           	psect	text7
   825  0004F8                     __ptext7:
   826                           	opt callstack 0
   827  0004F8                     _Lcd_Clear:
   828                           	opt callstack 28
   829                           
   830                           ;LCD_Module.c: 44:  Lcd_Cmd(0);
   831                           
   832                           ;incstack = 0
   833  0004F8  0E00               	movlw	0
   834  0004FA  EC69  F002         	call	_Lcd_Cmd
   835                           
   836                           ;LCD_Module.c: 45:  Lcd_Cmd(1);
   837  0004FE  0E01               	movlw	1
   838  000500  EC69  F002         	call	_Lcd_Cmd
   839  000504  0012               	return		;funcret
   840  000506                     __end_of_Lcd_Clear:
   841                           	opt callstack 0
   842                           
   843 ;; *************** function _Lcd_Cmd *****************
   844 ;; Defined at:
   845 ;;		line 33 in file "LCD_Module.c"
   846 ;; Parameters:    Size  Location     Type
   847 ;;  a               1    wreg     unsigned char 
   848 ;; Auto vars:     Size  Location     Type
   849 ;;  a               1    1[COMRAM] unsigned char 
   850 ;; Return value:  Size  Location     Type
   851 ;;                  1    wreg      void 
   852 ;; Registers used:
   853 ;;		wreg, status,2, cstack
   854 ;; Tracked objects:
   855 ;;		On entry : 0/0
   856 ;;		On exit  : 0/0
   857 ;;		Unchanged: 0/0
   858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   859 ;;      Params:         0       0       0       0
   860 ;;      Locals:         1       0       0       0
   861 ;;      Temps:          0       0       0       0
   862 ;;      Totals:         1       0       0       0
   863 ;;Total ram usage:        1 bytes
   864 ;; Hardware stack levels used:    1
   865 ;; Hardware stack levels required when called:    1
   866 ;; This function calls:
   867 ;;		_Lcd_Port
   868 ;; This function is called by:
   869 ;;		_Lcd_Clear
   870 ;;		_Lcd_Set_Cursor
   871 ;;		_Lcd_Init
   872 ;;		_Lcd_Shift_Right
   873 ;;		_Lcd_Shift_Left
   874 ;; This function uses a non-reentrant model
   875 ;;
   876                           
   877                           	psect	text8
   878  0004D2                     __ptext8:
   879                           	opt callstack 0
   880  0004D2                     _Lcd_Cmd:
   881                           	opt callstack 28
   882                           
   883                           ;incstack = 0
   884                           ;Lcd_Cmd@a stored from wreg
   885  0004D2  6E02               	movwf	Lcd_Cmd@a,c
   886                           
   887                           ;LCD_Module.c: 33: void Lcd_Cmd(char a);LCD_Module.c: 34: {;LCD_Module.c: 35:  PORTDbits
      +                          .RD2 = 0;
   888  0004D4  9483               	bcf	3971,2,c	;volatile
   889                           
   890                           ;LCD_Module.c: 36:  Lcd_Port(a);
   891  0004D6  5002               	movf	Lcd_Cmd@a,w,c
   892  0004D8  EC32  F002         	call	_Lcd_Port
   893                           
   894                           ;LCD_Module.c: 37:  PORTDbits.RD3 = 1;
   895  0004DC  8683               	bsf	3971,3,c	;volatile
   896                           
   897                           ;LCD_Module.c: 38:         _delay((unsigned long)((4)*(80000/4000.0)));
   898  0004DE  0E1A               	movlw	26
   899  0004E0                     u257:
   900  0004E0  2EE8               	decfsz	wreg,f,c
   901  0004E2  D7FE               	bra	u257
   902  0004E4  D000               	nop2	
   903                           
   904                           ;LCD_Module.c: 39:         PORTDbits.RD3 = 0;
   905  0004E6  9683               	bcf	3971,3,c	;volatile
   906  0004E8  0012               	return		;funcret
   907  0004EA                     __end_of_Lcd_Cmd:
   908                           	opt callstack 0
   909                           
   910 ;; *************** function _Lcd_Port *****************
   911 ;; Defined at:
   912 ;;		line 11 in file "LCD_Module.c"
   913 ;; Parameters:    Size  Location     Type
   914 ;;  a               1    wreg     unsigned char 
   915 ;; Auto vars:     Size  Location     Type
   916 ;;  a               1    0[COMRAM] unsigned char 
   917 ;; Return value:  Size  Location     Type
   918 ;;                  1    wreg      void 
   919 ;; Registers used:
   920 ;;		wreg
   921 ;; Tracked objects:
   922 ;;		On entry : 0/0
   923 ;;		On exit  : 0/0
   924 ;;		Unchanged: 0/0
   925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   926 ;;      Params:         0       0       0       0
   927 ;;      Locals:         1       0       0       0
   928 ;;      Temps:          0       0       0       0
   929 ;;      Totals:         1       0       0       0
   930 ;;Total ram usage:        1 bytes
   931 ;; Hardware stack levels used:    1
   932 ;; This function calls:
   933 ;;		Nothing
   934 ;; This function is called by:
   935 ;;		_Lcd_Cmd
   936 ;;		_Lcd_Init
   937 ;;		_Lcd_Write_Char
   938 ;; This function uses a non-reentrant model
   939 ;;
   940                           
   941                           	psect	text9
   942  000464                     __ptext9:
   943                           	opt callstack 0
   944  000464                     _Lcd_Port:
   945                           	opt callstack 28
   946                           
   947                           ;incstack = 0
   948                           ;Lcd_Port@a stored from wreg
   949  000464  6E01               	movwf	Lcd_Port@a,c
   950                           
   951                           ;LCD_Module.c: 11: void Lcd_Port(char a);LCD_Module.c: 12: {;LCD_Module.c: 13:  if(a & 1
      +                          )
   952  000466  A001               	btfss	Lcd_Port@a,0,c
   953  000468  D002               	goto	l77
   954                           
   955                           ;LCD_Module.c: 14:   PORTDbits.RD4 = 1;
   956  00046A  8883               	bsf	3971,4,c	;volatile
   957  00046C  D001               	goto	l831
   958  00046E                     l77:
   959                           
   960                           ;LCD_Module.c: 16:   PORTDbits.RD4 = 0;
   961  00046E  9883               	bcf	3971,4,c	;volatile
   962  000470                     l831:
   963                           
   964                           ;LCD_Module.c: 18:  if(a & 2)
   965  000470  A201               	btfss	Lcd_Port@a,1,c
   966  000472  D002               	goto	l79
   967                           
   968                           ;LCD_Module.c: 19:   PORTDbits.RD5 = 1;
   969  000474  8A83               	bsf	3971,5,c	;volatile
   970  000476  D001               	goto	l835
   971  000478                     l79:
   972                           
   973                           ;LCD_Module.c: 21:   PORTDbits.RD5 = 0;
   974  000478  9A83               	bcf	3971,5,c	;volatile
   975  00047A                     l835:
   976                           
   977                           ;LCD_Module.c: 23:  if(a & 4)
   978  00047A  A401               	btfss	Lcd_Port@a,2,c
   979  00047C  D002               	goto	l81
   980                           
   981                           ;LCD_Module.c: 24:   PORTDbits.RD6 = 1;
   982  00047E  8C83               	bsf	3971,6,c	;volatile
   983  000480  D001               	goto	l839
   984  000482                     l81:
   985                           
   986                           ;LCD_Module.c: 26:   PORTDbits.RD6 = 0;
   987  000482  9C83               	bcf	3971,6,c	;volatile
   988  000484                     l839:
   989                           
   990                           ;LCD_Module.c: 28:  if(a & 8)
   991  000484  A601               	btfss	Lcd_Port@a,3,c
   992  000486  D002               	goto	l83
   993                           
   994                           ;LCD_Module.c: 29:   PORTDbits.RD7 = 1;
   995  000488  8E83               	bsf	3971,7,c	;volatile
   996  00048A  0012               	return	
   997  00048C                     l83:
   998                           
   999                           ;LCD_Module.c: 31:   PORTDbits.RD7 = 0;
  1000  00048C  9E83               	bcf	3971,7,c	;volatile
  1001  00048E  0012               	return		;funcret
  1002  000490                     __end_of_Lcd_Port:
  1003                           	opt callstack 0
  1004                           
  1005                           	psect	rparam
  1006  0000                     tosu	equ	0xFFF
  1007                           tosh	equ	0xFFE
  1008                           tosl	equ	0xFFD
  1009                           stkptr	equ	0xFFC
  1010                           pclatu	equ	0xFFB
  1011                           pclath	equ	0xFFA
  1012                           pcl	equ	0xFF9
  1013                           tblptru	equ	0xFF8
  1014                           tblptrh	equ	0xFF7
  1015                           tblptrl	equ	0xFF6
  1016                           tablat	equ	0xFF5
  1017                           prodh	equ	0xFF4
  1018                           prodl	equ	0xFF3
  1019                           indf0	equ	0xFEF
  1020                           postinc0	equ	0xFEE
  1021                           postdec0	equ	0xFED
  1022                           preinc0	equ	0xFEC
  1023                           plusw0	equ	0xFEB
  1024                           fsr0h	equ	0xFEA
  1025                           fsr0l	equ	0xFE9
  1026                           wreg	equ	0xFE8
  1027                           indf1	equ	0xFE7
  1028                           postinc1	equ	0xFE6
  1029                           postdec1	equ	0xFE5
  1030                           preinc1	equ	0xFE4
  1031                           plusw1	equ	0xFE3
  1032                           fsr1h	equ	0xFE2
  1033                           fsr1l	equ	0xFE1
  1034                           bsr	equ	0xFE0
  1035                           indf2	equ	0xFDF
  1036                           postinc2	equ	0xFDE
  1037                           postdec2	equ	0xFDD
  1038                           preinc2	equ	0xFDC
  1039                           plusw2	equ	0xFDB
  1040                           fsr2h	equ	0xFDA
  1041                           fsr2l	equ	0xFD9
  1042                           status	equ	0xFD8


Data Sizes:
    Strings     26
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     11      11
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> STR_2(CODE[6]), STR_1(CODE[20]), 


Critical Paths under _main in COMRAM

    _main->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1084
                                             10 COMRAM     1     1      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                  _setting_registers
                 _transmit_character
 ---------------------------------------------------------------------------------
 (1) _transmit_character                                   1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setting_registers                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2     362
                                              4 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     120
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     497
                                              2 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             0     0      0     135
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              1     1      0      75
                                              1 COMRAM     1     1      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _setting_registers
   _transmit_character

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      B       B       1       11.6%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BIGRAM             2FF      0       0      10        0.0%
DATA                 0      0       0      11        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed Apr 03 22:49:54 2019

        ?_transmit_character 0001                           l81 0482                           l83 048C  
                         l77 046E                           l79 0478                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                          l831 0470                          l835 047A  
                        l839 0484                          l947 0508                 __CFG_CPB$OFF 000000  
                        u217 03C0                          u227 0324                          u237 0332  
                        u247 0340                          u257 04E0                 __CFG_CPD$OFF 000000  
                        _RX9 007D5E                          _TX9 007D66                          wreg 000FE8  
               __CFG_OSC$IRC 000000         ??_transmit_character 0001                 __CFG_LVP$OFF 000000  
                       l1031 0444                         l1017 03F2                         l1041 0388  
                       l1027 0424                         STR_1 0301                         STR_2 0315  
                       _CREN 007D5C                         _RCIE 007CED                         _SPEN 007D5F  
                       _TXIE 007CEC                         _TXEN 007D65                         _TXIF 007CF4  
                       _SYNC 007D64            ?_Lcd_Write_String 0005                         _main 0378  
              __CFG_BOREN$ON 000000                         start 0000           ??_Lcd_Write_String 0007  
              __CFG_IESO$OFF 000000              __end_of_Lcd_Cmd 04EA                __CFG_MCLRE$ON 000000  
               ___param_bank 000000                        ?_main 0001                __CFG_WDTEN$ON 000000  
                      _SPBRG 000FAF      __size_of_Lcd_Set_Cursor 0050                        _TRISD 000F95  
                      _TXREG 000FAD                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
             __CFG_EBTRB$OFF 000000                        tablat 000FF5                        status 000FD8  
           __end_of_Lcd_Init 0378             __end_of_Lcd_Port 0490              __initialization 04EA  
             __CFG_HPOL$HIGH 000000                 __end_of_main 03CA               __CFG_LPOL$HIGH 000000  
                     ??_main 000B           __size_of_Lcd_Clear 000E                __activetblptr 000001  
                  ??_Lcd_Cmd 0002               __CFG_WINEN$OFF 000000      __size_of_Lcd_Write_Char 0028  
             __CFG_SSPMX$RC7 000000               __CFG_STVREN$ON 000000                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
            Lcd_Set_Cursor@a 0004              Lcd_Set_Cursor@b 0003              Lcd_Set_Cursor@y 0006  
            Lcd_Set_Cursor@z 0005                   __accesstop 0060      __end_of__initialization 04EA  
            __CFG_FLTAMX$RC1 000000            __end_of_Lcd_Clear 0506                ___rparam_used 000001  
            __CFG_T1OSCMX$ON 000000               __pcstackCOMRAM 0001               _Lcd_Set_Cursor 03CA  
                  ?_Lcd_Init 0001                    ?_Lcd_Port 0001              __CFG_WDPS$32768 000000  
  __size_of_Lcd_Write_String 004A       __end_of_Lcd_Set_Cursor 041A              __CFG_PWM4MX$RB5 000000  
                 ??_Lcd_Init 0003                   ??_Lcd_Port 0001  __size_of_transmit_character 000C  
            __CFG_PWMPIN$OFF 000000               _Lcd_Write_Char 0490                      _Lcd_Cmd 04D2  
            __CFG_PWRTEN$OFF 000000                      __Hparam 0000                      __Lparam 0000  
               __psmallconst 0300                      __pcinit 04EA                      __ramtop 0300  
            ?_Lcd_Set_Cursor 0003                      __ptext0 0378                      __ptext1 0506  
                    __ptext2 04B8                      __ptext3 041A                      __ptext4 0490  
                    __ptext5 03CA                      __ptext6 031C                      __ptext7 04F8  
                    __ptext8 04D2                      __ptext9 0464       __end_of_Lcd_Write_Char 04B8  
       end_of_initialization 04EA                    Lcd_Port@a 0001                    _PORTAbits 000F80  
                  _PORTDbits 000F83                    _TRISAbits 000F92                    _TRISCbits 000F94  
            ?_Lcd_Write_Char 0001            Lcd_Write_String@a 0005            Lcd_Write_String@i 0009  
                  _Lcd_Clear 04F8             __CFG_EXCLKMX$RC3 000000             _Lcd_Write_String 041A  
        start_initialization 04EA            _setting_registers 04B8           ?_setting_registers 0001  
          __size_of_Lcd_Init 005C            __size_of_Lcd_Port 002C          ??_setting_registers 0001  
                 ?_Lcd_Clear 0001              Lcd_Write_Char@a 0004              Lcd_Write_Char@y 0003  
  __end_of_setting_registers 04D2                     ?_Lcd_Cmd 0001             ??_Lcd_Set_Cursor 0004  
                __smallconst 0300   __end_of_transmit_character 0512                     _LATAbits 000F89  
                   Lcd_Cmd@a 0002                  ??_Lcd_Clear 0003   __size_of_setting_registers 001A  
           ??_Lcd_Write_Char 0002                     _Lcd_Init 031C                     _Lcd_Port 0464  
   __end_of_Lcd_Write_String 0464             __size_of_Lcd_Cmd 0018                     __Hrparam 0000  
                   __Lrparam 0000                 __Lsmallconst 0300                __size_of_main 0052  
         Lcd_Write_Char@temp 0002           Lcd_Set_Cursor@temp 0007        transmit_character@out 0001  
         _transmit_character 0506  
